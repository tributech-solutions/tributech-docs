"use strict";(self.webpackChunktributech_docs=self.webpackChunktributech_docs||[]).push([[5450],{21476:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-source-mqtt-config-topic-stream-407f2c6d58590c41d2f98cb9ee977000.png"},23648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>h,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"tributech_agent/sources/mqtt_source","title":"MQTT Source","description":"The Tributech Agent supports the integration of external data sources using the MQTT messaging protocol with the  Tributech MQTT Source. The MQTT Source itself is configured via the Twin Configuration and will be described in the following sections.","source":"@site/versioned_docs/version-4.0.0/tributech_agent/sources/mqtt_source.mdx","sourceDirName":"tributech_agent/sources","slug":"/tributech_agent/sources/mqtt_source","permalink":"/4.0.0/tributech_agent/sources/mqtt_source","draft":false,"unlisted":false,"editUrl":"https://github.com/tributech-solutions/tributech-dsk-docs/edit/master/versioned_docs/version-4.0.0/tributech_agent/sources/mqtt_source.mdx","tags":[],"version":"4.0.0","sidebarPosition":1,"frontMatter":{"title":"MQTT Source","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Source Integration","permalink":"/4.0.0/tributech_agent/source_integration"},"next":{"title":"ADS Source","permalink":"/4.0.0/tributech_agent/sources/ads_source"}}');var o=n(74848),r=n(28453),s=n(21028);const c='version: "3.6"\n\nservices:\n  source-mqtt:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-source-mqtt:${SOURCE_TAG:-latest}\n    depends_on:\n      - mosquitto-server\n      - tributech-agent\n    environment:\n      - MqttOptions__MQTTHost=mosquitto-server\n      - Logging__LogLevel__Default=Debug\n    networks:\n      - mqtt-net\n    restart: unless-stopped\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "2m"\n        max-file: "5"\n\n  tributech-agent:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-agent:${AGENT_TAG:-latest}\n    depends_on:\n      - mosquitto-server\n    environment:\n      - Logging__LogLevel__Default=Debug\n      - Logging__Console__FormatterName=simple\n      - MqttOptions__MQTTHost=mosquitto-server\n      - EdgeDeviceOptions__AgentID=${AGENT_ID:?"The Tributech Agent requires a GUID"}\n      - EdgeDeviceOptions__NodeUrl=${NODE_URL:?"The Tributech Node Url is required"}\n      - EnrollmentOptions__EnrollmentCertBase64=${ENROLLMENT_CERT_BASE64:?"The base64 encoded Enrollment Cert is required"}\n      - EnrollmentOptions__EnrollmentKeyBase64=${ENROLLMENT_KEY_BASE64:?"The base64 encoded Enrollment Key is required"}\n    networks:\n      - mqtt-net\n    ports:\n      - "5000:8080" # enable access to agent mqtt-API (e.g. for configuration with Agent-Companion)\n    volumes:\n      - ./volumes/mqtt/agent/:/app/data # volume mapping for permanent storage of keys and datatwin file\n    restart: unless-stopped\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "2m"\n        max-file: "5"\n\n  mosquitto-server:\n    image: eclipse-mosquitto:${MQTT_TAG:-1.6}\n    networks:\n      - mqtt-net\n    ports:\n     - \'1883:1883\' # MQTT\n    # - "127.0.0.1:9001:9001" # web-socket\n    restart: unless-stopped\n\n\nnetworks:\n  mqtt-net:\n',a='version: "3.6"\n\nservices:\n  source-mqtt-mock-client:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-source-mqtt-mockclient:${SOURCE_TAG:-latest}\n    depends_on:\n      - mosquitto-server\n      - tributech-agent\n      - source-mqtt\n    environment:\n      - MqttOptions__MQTTHost=mosquitto-server\n      - Logging__LogLevel__Default=Debug\n\n      # Configurable Topic Stream\n      - MockOptions__Streams__0__Topic=test/bar\n      - MockOptions__Streams__0__StreamEncoding=3 # double\n      - MockOptions__Streams__0__Interval=00:00:05.000\n\n      # Predfined Payload Stream\n      - MockOptions__Streams__1__MachineId=my-machine-id\n      - MockOptions__Streams__1__SensorId=my-sensor-id\n      - MockOptions__Streams__1__StreamEncoding=3 # double\n      - MockOptions__Streams__1__Interval=00:00:05.000\n\n    networks:\n      - mqtt-net\n    restart: unless-stopped\n';var d=n(95950);const l={title:"MQTT Source",sidebar_position:1},h=void 0,u={},m=[{value:"Setup",id:"setup",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Configurable Topic Stream",id:"configurable-topic-stream",level:3},{value:"Pre-defined Payload Stream",id:"pre-defined-payload-stream",level:3},{value:"Value Change Options",id:"value-change-options",level:3},{value:"Configurable MessageBroker (Optional)",id:"configurable-messagebroker-optional",level:3},{value:"Providing Data",id:"providing-data",level:2},{value:"MQTT Explorer",id:"mqtt-explorer",level:3},{value:"Sending Configurable Topic Stream Example",id:"sending-configurable-topic-stream-example",level:4},{value:"Sending Pre-defined Payload Stream Example",id:"sending-pre-defined-payload-stream-example",level:4},{value:"MockClient",id:"mockclient",level:3},{value:"Modify docker-compose.override.yml",id:"modify-docker-composeoverrideyml",level:4}];function p(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The Tributech Agent supports the integration of external data sources using the ",(0,o.jsx)(t.a,{href:"https://mqtt.org/",children:(0,o.jsx)(t.strong,{children:"MQTT messaging protocol"})})," with the  Tributech MQTT Source. The MQTT Source itself is configured via the Twin Configuration and will be described in the following sections."]}),"\n",(0,o.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(t.p,{children:["The Tributech MQTT Source image can be started without any dependencies but will not be functional without a valid Twin Configuration or MessageBroker connect to the Tributech Agent. The TwinConfiguration can be provided via the Tributech Node (recommended) or MessageBroker (see ",(0,o.jsx)(t.a,{href:"../source_integration#twin-model",children:"Source Integration"}),"). The MQTT Source will automatically connect to the Tributech Agent if the Tributech Agent is running and the MQTT Source is configured with the correct MessageBroker settings."]}),"\n",(0,o.jsx)(t.p,{children:"In the following part we will describe the setup of a Tributech MQTT Source."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Setup the ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"docker-compose.yml"})})," file by creating a ",(0,o.jsx)(t.code,{children:"docker-compose.yml"})," file with the following content (adjustments required):"]}),"\n"]}),"\n",(0,o.jsx)(s.A,{className:"language-yml",title:"docker-compose.yml",children:c}),"\n",(0,o.jsxs)(t.p,{children:["Adjust the setting for the ",(0,o.jsx)(t.a,{href:"/4.0.0/tributech_agent/overview",children:"Tribtech Agent"})," to your environment, sample value:"]}),"\n",(0,o.jsx)(s.A,{className:"language-plain",title:"env specific settings",children:d.A}),"\n",(0,o.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(t.p,{children:["After setting up the Tributech MQTT Source we need to activate it in the Tributech Node (see ",(0,o.jsx)(t.a,{href:"/4.0.0/tributech_node/agent/agent_management#activate-agent",children:"Agent Management"}),") and configure the TwinConfiguration."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Configure Agent",src:n(74120).A+"",width:"1909",height:"351"})}),"\n",(0,o.jsx)(t.p,{children:"We can now add by right clicking the Device Edge entry a new MQTT Source."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Add MQTT Source",src:n(99884).A+"",width:"711",height:"587"})}),"\n",(0,o.jsx)(t.p,{children:"After right clicking on the MQTT Source entry we can add a new MQTT Stream."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Add MQTT Stream",src:n(33976).A+"",width:"695",height:"575"})}),"\n",(0,o.jsx)(t.p,{children:"We have two possible choice"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"MQTT Configurable Topic Stream"}),": A stream with a custom topic that supports wildcards for the MQTT Topic, e.g. ",(0,o.jsx)(t.code,{children:"test/#"})," or ",(0,o.jsx)(t.code,{children:"test/+/TEMP"})]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"MQTT Pre-defined Payload"}),": A stream with a predefined payload keypair that will be used as an identifier and be sent to a common MQTT Topic"]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"configurable-topic-stream",children:"Configurable Topic Stream"}),"\n",(0,o.jsxs)(t.p,{children:["In this section we configure a Stream that is linked to a freely customizable MQTT Topic. The following example shows how to setup a stream for a double value with the display name MQTT Stream and the MQTT Topic ",(0,o.jsx)(t.code,{children:"xxo"}),". For custom topics, two wildcards are supported:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["A ",(0,o.jsx)(t.code,{children:"#"})," character represents a complete sub-tree of the hierarchy and thus must be the last character in a subscription topic string, such as ",(0,o.jsx)(t.code,{children:"test/#"}),". This will match any topic starting with ",(0,o.jsx)(t.code,{children:"test/"}),", such as ",(0,o.jsx)(t.code,{children:"test/1/TEMP"})," and ",(0,o.jsx)(t.code,{children:"test/2/HUMIDITY"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["A ",(0,o.jsx)(t.code,{children:"+"})," character represents a single level of the hierarchy and is used between delimiters. For example, ",(0,o.jsx)(t.code,{children:"test/+/TEMP"})," will match ",(0,o.jsx)(t.code,{children:"test/1/TEMP"})," and ",(0,o.jsx)(t.code,{children:"test/2/TEMP"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["The following example shows an example for the wildcard ",(0,o.jsx)(t.code,{children:"#"}),". After changes to the ",(0,o.jsx)(t.code,{children:"MQTT custom topic"})," we need to\nsave the settings by clicking on the ",(0,o.jsx)(t.code,{children:"SAVE IN WORKSPACE"})," button in the bottom."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"&quot;Add MQTT Configurable Topic Stream",src:n(21476).A+"",width:"1904",height:"1058"})}),"\n",(0,o.jsxs)(t.p,{children:["We can repeat this process for all required streams for the MQTT Source. An important note is that the MQTT Source will only work when there are no overlapping topics, i.e. ",(0,o.jsx)(t.code,{children:"test/#"})," and ",(0,o.jsx)(t.code,{children:"test/+/TEMP"})," are not allowed to be configured for the same MQTT Source."]}),"\n",(0,o.jsxs)(t.p,{children:["After we have configured the MQTT Source we can apply the configuration to the Tributech Agent by clicking on the ",(0,o.jsx)(t.code,{children:"APPLY CONFIGURATION"})," button in the top right corner."]}),"\n",(0,o.jsxs)(t.p,{children:["This completes the configuration of the MQTT Source and we can now send data to the MQTT Source either via an MQTT Client Application like ",(0,o.jsx)(t.a,{href:"https://mqttx.app/",children:"MQTTX"}),", ",(0,o.jsx)(t.a,{href:"http://mqtt-explorer.com/",children:"MQTT Explorer"})," or with our ",(0,o.jsx)(t.a,{href:"#mockclient",children:"Tributech MQTT MockClient"}),". The Tributech MQTT Source MockClient is currently only for testing purposes and works only in combination with our Tributech MQTT Source."]}),"\n",(0,o.jsx)(t.h3,{id:"pre-defined-payload-stream",children:"Pre-defined Payload Stream"}),"\n",(0,o.jsxs)(t.p,{children:["In this section we configure a Stream that is linked to a predefined payload keypair. The difference to the Topic Stream is that this Stream will not be linked to a custom MQTT Topic but to a common MQTT Topic. The following example shows how to setup a stream for a double value with the keypair ",(0,o.jsx)(t.code,{children:"my-machine-id"})," and ",(0,o.jsx)(t.code,{children:"my-sensor-id"})," as stream identifier. The MQTT Topic is set per default to ",(0,o.jsx)(t.code,{children:"edge/+/value/GenericValueSource"}),". For payload streams, two identifier are supported and need to be unique for each stream. The following keypairs are:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"&quot;Add MQTT Payload Stream",src:n(97665).A+"",width:"1905",height:"1021"})}),"\n",(0,o.jsxs)(t.p,{children:["We can now send data to the MQTT Source either via an MQTT Client Application like ",(0,o.jsx)(t.a,{href:"https://mqttx.app/",children:"MQTTX"}),", ",(0,o.jsx)(t.a,{href:"http://mqtt-explorer.com/",children:"MQTT Explorer"})," or with our ",(0,o.jsx)(t.a,{href:"#mockclient",children:"Tributech MQTT MockClient"})," to the common MQTT Topic ",(0,o.jsx)(t.code,{children:"edge/+/value/GenericValueSource"}),". The Tributech MQTT Source MockClient is currently only for testing purposes and works only in combination with our Tributech MQTT Source."]}),"\n",(0,o.jsx)(t.h3,{id:"value-change-options",children:"Value Change Options"}),"\n",(0,o.jsxs)(t.p,{children:["The basic handling of Value Change Options (VCO) can be found in ",(0,o.jsx)(t.a,{href:"/4.0.0/tributech_agent/source_integration#value-change-options",children:"Source Integration"}),". This section contains the concrete handling of the ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Step (Delta)"})})," for the simulated source. The following list contains the description for each supported ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Stream Data Encoding"})})," where ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"X"})})," represents the value for ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Step (Delta)"})}),":"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Double"})}),", ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Int32"})}),", ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Long"})}),", ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Float"})}),": defines the minimum difference between values to be submitted, the change is always compared to the last successful submitted value, e.g. if ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"X"})}),"= 3 if the double values 1, 2, 5, 8, 10, 11, 14 are received by the Tributech Source only 1, 5, 8, 11, 14 will be submitted."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Byte Array"})}),": will only be submitted if the current and last submitted value are not equal"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"String UTF 8"})}),": will only be submitted if the current and last submitted value are not equal"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Boolean"})}),": will only be submitted if the current and last submitted value are not equal"]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"configurable-messagebroker-optional",children:"Configurable MessageBroker (Optional)"}),"\n",(0,o.jsxs)(t.p,{children:["In this section we show how an additional MessageBroker can be configured to collect data from a different MessageBroker than the one defined in the ",(0,o.jsx)(t.code,{children:"docker-compose.yml"})," (i.e. ",(0,o.jsx)(t.code,{children:"source-mqtt"}),"). This configuration is optional and does not replace the initial ",(0,o.jsx)(t.code,{children:"source-mqtt"})," connection. Its only needed if the MQTT Source should be configured to use a different MessageBroker for data collection. Configuration updates and publishing values to the Tributech Node will still be done via the ",(0,o.jsx)(t.code,{children:"source-mqtt"})," service."]}),"\n",(0,o.jsx)(t.p,{children:"The following example shows how to setup the MessageBroker for the MQTT Source with a different host and port:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Additional MQTT Broker Configuration",src:n(32174).A+"",width:"1710",height:"995"})}),"\n",(0,o.jsxs)(t.p,{children:["We can save the settings by clicking on the ",(0,o.jsx)(t.code,{children:"SAVE IN WORKSPACE"})," button in the bottom and apply the changes by clicking ",(0,o.jsx)(t.code,{children:"APPLY CONFIGURATION"}),".\nIf the MQTT Source is not able to connect to the MessageBroker the MQTT Source will not be able to receive any data.\nHowever, the MQTT Source will ",(0,o.jsx)(t.code,{children:"fallback"})," to the default MessageBroker settings (aka the MessageBroker from the ",(0,o.jsx)(t.code,{children:"docker-compose.yml"}),") if the ",(0,o.jsx)(t.code,{children:"MQTT Host"})," is empty or the ",(0,o.jsx)(t.code,{children:"MQTT Port"})," is set to 0."]}),"\n",(0,o.jsx)(t.h2,{id:"providing-data",children:"Providing Data"}),"\n",(0,o.jsxs)(t.p,{children:["In the following section we want to outline two different ways to provide data to the MQTT Source. The first way is to use the ",(0,o.jsx)(t.a,{href:"http://mqtt-explorer.com/",children:(0,o.jsx)(t.strong,{children:"MQTT Explorer"})})," to send data to the MQTT Source. The second way is to use the MQTT MockClient to send data to the MQTT Source. In our example we can access the MQTT MessageBroker on port 1883 (need to match your ",(0,o.jsx)(t.code,{children:"mosquitto-server-mqtt"})," service in the ",(0,o.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(47714).A+"",children:(0,o.jsx)(t.code,{children:"docker-compose.yml"})}),")."]}),"\n",(0,o.jsx)(t.h3,{id:"mqtt-explorer",children:"MQTT Explorer"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.a,{href:"http://mqtt-explorer.com/",children:(0,o.jsx)(t.strong,{children:"MQTT Explorer"})})," supports the interact and monitoring of a MQTT MessageBroker via a simple UI.\nWe can use the ",(0,o.jsx)(t.a,{href:"http://mqtt-explorer.com/",children:(0,o.jsx)(t.strong,{children:"MQTT Explorer"})})," to connect to the ",(0,o.jsx)(t.code,{children:"mosquitto-server-mqtt"})," service in the ",(0,o.jsx)(t.code,{children:"docker-compose.yml"}),"\non port 1883 and manually submit data to MQTT Source via the MessageBroker.\nThe MQTT Source will send received data after process via the Tribtech Agent to the Tributech Node."]}),"\n",(0,o.jsxs)(t.p,{children:["The data of the previously defined Streams can be viewed in the Tributech Node by clicking on the corresponding ",(0,o.jsx)(t.code,{children:"MQTT Stream"}),".\nPer default we will show the data directly in the ",(0,o.jsx)(t.code,{children:"Stream Data Encoding"})," defined datatype tab."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Mqtt Explorer publish",src:n(69711).A+"",width:"1720",height:"541"})}),"\n",(0,o.jsx)(t.h4,{id:"sending-configurable-topic-stream-example",children:"Sending Configurable Topic Stream Example"}),"\n",(0,o.jsxs)(t.p,{children:["The example will submit the following payload data to the MQTT Source previously configured in ",(0,o.jsx)(t.a,{href:"#setup",children:"Setup"})," :"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:'    {\n        "Timestamp":"2023-07-13T05:50:07.1003104+00:00",\n        "Value":432\n    }\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsxs)(t.strong,{children:["Note that double or float values support only a ",(0,o.jsx)(t.code,{children:"."})," as a decimal separator"]})}),"\n",(0,o.jsx)(t.p,{children:"The timestamp can also be changed to fit all specific time zones, this can be done with the last part in the timestamp, here the time difference can be added, for example: \xabTimestamp\xbb:\xab2023-07-13T05:50:07.1003104+02:00\xbb. It is important that the timestamp also contains microseconds. These can be zeros, but the microseconds are crucial for the timestamp to be processed by the system."}),"\n",(0,o.jsxs)(t.p,{children:["We can post the data to the MQTT Source by clicking on the ",(0,o.jsx)(t.code,{children:"Publish"})," button in the top right corner."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Mqtt Explorer publish",src:n(41249).A+"",width:"1749",height:"344"})}),"\n",(0,o.jsx)(t.h4,{id:"sending-pre-defined-payload-stream-example",children:"Sending Pre-defined Payload Stream Example"}),"\n",(0,o.jsxs)(t.p,{children:["The example will submit the following payload data to the MQTT Source previously configured in ",(0,o.jsx)(t.a,{href:"#setup",children:"Setup"})," :"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:'    {\n        "MachineID": "my-machine-id",\n        "SensorID": "my-sensor-id",\n        "Timestamp":"2023-07-13T05:50:07.1003104+00:00",\n        "Value": 147\n    }\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Mqtt Explorer publish",src:n(98586).A+"",width:"1768",height:"368"})}),"\n",(0,o.jsx)(t.h3,{id:"mockclient",children:"MockClient"}),"\n",(0,o.jsxs)(t.p,{children:["We provide an additional ",(0,o.jsx)(t.code,{children:"docker-compose.override.yml"})," below to include a MockClient. This setup can be used to send data to the MQTT Source without external tools. The MockClient is only for testing purposes and should not be used in production. In order to start the the MockClient with the Tributech MQTT Source copy the ",(0,o.jsx)(t.code,{children:"docker-compose.override.yml"})," file in the same folder as the ",(0,o.jsx)(t.code,{children:"docker-compose.yml"})," before using the ",(0,o.jsx)(t.code,{children:"docker-compose up"})," command."]}),"\n",(0,o.jsxs)(t.p,{children:["The following configuration shows how to setup the MockClient and send data to the MQTT Source for double stream. This example can be extended by adding new entries with an increasing index for the ",(0,o.jsx)(t.code,{children:"MockOptions__Streams__{index}__StreamEncoding"})," environment variables. The following example shows how to add a Configurable Topic and Pre-defined Payload Stream the a MockClient:"]}),"\n",(0,o.jsx)(s.A,{className:"language-yml",title:"docker-compose.override.yml",children:a}),"\n",(0,o.jsx)(t.p,{children:"After starting the MockClient we can see the data in the Tributech Node Stream we set up before in the configure section."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"MQTT Mock publish",src:n(33747).A+"",width:"1703",height:"891"})}),"\n",(0,o.jsx)(t.h4,{id:"modify-docker-composeoverrideyml",children:"Modify docker-compose.override.yml"}),"\n",(0,o.jsxs)(t.p,{children:["We can adjust the data generation to our needs by modifying the ",(0,o.jsx)(t.code,{children:"docker-compose.override.yml"})," file, see ",(0,o.jsx)(t.a,{href:"https://docs.docker.com/compose/",children:"Docker"})," for details on how to setup the environment for docker-compose."]}),"\n",(0,o.jsxs)(t.p,{children:["Dependent on which type of stream we want to send we can adjust the following environment variables either we need to set the ",(0,o.jsx)(t.code,{children:"MockOptions__Streams__{index}__Topic"})," for the Configurable Topic Stream or ",(0,o.jsx)(t.code,{children:"MockOptions__Streams__{index}__MachineID"})," and ",(0,o.jsx)(t.code,{children:"MockOptions__Streams__{index}__SensorID"})," for the Pre-defined Payload Stream. The following example shows how to add a second stream to the MockClient:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"    ...\n    environment:\n      ...\n      # Stream 1\n      - MockOptions__Streams__0__Topic=xxo/foo\n      - MockOptions__Streams__0__StreamEncoding=DOUBLE\n\n      # Stream 2\n      - MockOptions__Streams__1__Topic=edge/00000000-0000-0000-0000-000000000007/value/GenericValueSource\n      - MockOptions__Streams__1__MachineID=my-machine-id\n      - MockOptions__Streams__1__SensorID=my-sensor-id\n      - MockOptions__Streams__1__StreamEncoding=DOUBLE\n      ...\n"})}),"\n",(0,o.jsxs)(t.p,{children:["In Order to add more streams the environment ",(0,o.jsx)(t.code,{children:"MockOptions"})," setting can be adjusted based on the AppSettings.json configuration capabilities, see ",(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0",children:"Microsoft"})," for details on how to setup the environment variables."]}),"\n",(0,o.jsxs)(t.p,{children:["We have some common settings for both streams that need to be set in the ",(0,o.jsx)(t.code,{children:"environment"})," variables to change the stream generation behaviour:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"StreamEncoding"}),": Sets the datatype which will be generated based on a numeric value (see ",(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types?redirectedfrom=MSDN",children:"Built-in Types"})," for details):"]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Value"}),(0,o.jsx)(t.th,{children:".Net type"}),(0,o.jsx)(t.th,{children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"BYTEARRAY"}),(0,o.jsx)(t.td,{children:"System.Byte[]"}),(0,o.jsx)(t.td,{children:"Array of 8-bit unsigned integer"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"FLOAT"}),(0,o.jsx)(t.td,{children:"System.Single"}),(0,o.jsx)(t.td,{children:"Single-precision floating-point number"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"DOUBLE"}),(0,o.jsx)(t.td,{children:"System.Double"}),(0,o.jsx)(t.td,{children:"Double-precision floating-point number"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"INT32"}),(0,o.jsx)(t.td,{children:"System.Int32"}),(0,o.jsx)(t.td,{children:"32-bit signed integer"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"INT64"}),(0,o.jsx)(t.td,{children:"System.Int64"}),(0,o.jsx)(t.td,{children:"64-bit signed integer"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"STRING_UTF8"}),(0,o.jsx)(t.td,{children:"System.String"}),(0,o.jsx)(t.td,{children:"UTF-8 encoded string"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"STRING_BASE64"}),(0,o.jsx)(t.td,{children:"System.String"}),(0,o.jsx)(t.td,{children:"UTF-8 encoded string which will be converted to a Base64 encoded string"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"BOOL"}),(0,o.jsx)(t.td,{children:"System.Boolean"}),(0,o.jsx)(t.td,{children:"Boolean value"})]})]})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Interval"}),": The interval (default 10sec) in which the values are generated in TimeSpan format, e.g. 00:00:05 for 5 seconds, see ",(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",children:"Microsoft"})," for details on TimeSpan format. The interval cannot be shorter than 1 second."]}),"\n"]}),"\n"]})]})}function g(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},32174:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-source-mqtt-additional-broker-876e8074cc8a1f6db27361d44b2fb781.png"},33747:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-source-mqtt-stream-values-mock-99f9ae128dda66dbdad3fc994fc52ea2.png"},33976:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-source-mqtt-add-streams-71773ac0d54f8d6ed0b4197dc292a8d5.png"},41249:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-source-mqtt-stream-value-publish-topic-f47d7db2ea95f7846e130c2d401ff8fa.png"},47714:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/files/docker-compose-86788d2fbed36313d71ef4bfe7f70f02.yml"},69711:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-source-mqtt-stream-value-double-05c0f7d575db33e1b3e170cbbd727897.png"},74120:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-agent-configure-7ae7cf405f48c53a50f626b64ce56f49.png"},95950:(e,t,n)=>{n.d(t,{A:()=>i});const i="tributech-agent:\n    ...\n    environment:\n      ...\n      - EdgeDeviceOptions__AgentID=00000000-0000-0000-0000-000000000007\n      - EdgeDeviceOptions__NodeUrl=https://my-environment.tributech-node.com\n      - EnrollmentOptions__EnrollmentCertBase64=LS0tLS1C...ZDdqb29rcUV\n      - EnrollmentOptions__EnrollmentKeyBase64=AKS0tLS1C...ZDdqb29rcDE"},97665:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-source-mqtt-config-payload-stream-71cb8cfceecba5a9193e75b9781248fd.png"},98586:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-source-mqtt-stream-value-publish-payload-a454ca63ba9b43b1a2d8ab157893b1d7.png"},99884:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-source-mqtt-add-e97d86f1c70ab2d4c883c37419b7c9bd.png"}}]);