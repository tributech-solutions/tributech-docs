"use strict";(self.webpackChunktributech_docs=self.webpackChunktributech_docs||[]).push([[290],{4618:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/node-source-mqtt-stream-value-publish-ce3aa103b21409608dacce5ca40418c7.png"},5861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>h,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"tributech_agent/sources/mqtt_source","title":"MQTT Source","description":"The Tributech Agent supports the integration of external data sources using the MQTT messaging protocol with the Tributech MQTT Source. The MQTT Source itself is configured via the Twin Configuration and will be described in the following sections.","source":"@site/versioned_docs/version-3.6.0/tributech_agent/sources/mqtt_source.mdx","sourceDirName":"tributech_agent/sources","slug":"/tributech_agent/sources/mqtt_source","permalink":"/3.6.0/tributech_agent/sources/mqtt_source","draft":false,"unlisted":false,"editUrl":"https://github.com/tributech-solutions/tributech-dsk-docs/edit/master/versioned_docs/version-3.6.0/tributech_agent/sources/mqtt_source.mdx","tags":[],"version":"3.6.0","sidebarPosition":1,"frontMatter":{"title":"MQTT Source","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Source Integration","permalink":"/3.6.0/tributech_agent/source_integration"},"next":{"title":"ADS Source","permalink":"/3.6.0/tributech_agent/sources/ads_source"}}');var s=n(74848),i=n(28453),o=n(21028);const c='version: "3.6"\n\nservices:\n  source-mqtt:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-source-mqtt:${SOURCE_TAG:-latest}\n    depends_on:\n      - mosquitto-server-mqtt\n      - tributech-agent-mqtt\n    environment:\n      - MqttOptions__MQTTHost=mosquitto-server-mqtt\n      - Logging__LogLevel__Default=Debug\n    networks:\n      - mqtt-net\n    restart: unless-stopped\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "2m"\n        max-file: "5"\n\n  tributech-agent-mqtt:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-agent:${AGENT_TAG:-latest}\n    depends_on:\n      - mosquitto-server-mqtt\n    environment:\n      - Logging__LogLevel__Default=Debug\n      - Logging__Console__FormatterName=simple\n      - MqttOptions__MQTTHost=mosquitto-server-mqtt\n      # general DSK edge agent configuration\n      - EdgeDeviceOptions__AgentID=${AGENT_ID:?"The variable AGENT_ID needs to be configured in the .env file."}\n    networks:\n      - mqtt-net\n    ports:\n      - "5000:80" # enable access to agent mqtt-API (e.g. for configuration with Agent-Companion)\n    volumes:\n      - ./volumes/mqtt/agent/:/app/data # volume mapping for permanent storage of keys and datatwin file\n    restart: unless-stopped\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "2m"\n        max-file: "5"\n\n  mosquitto-server-mqtt:\n    image: eclipse-mosquitto:${MQTT_TAG:-1.6}\n    networks:\n      - mqtt-net\n    ports:\n     - \'1883:1883\' # MQTT\n    # - "127.0.0.1:9001:9001" # web-socket\n    restart: unless-stopped\n\n\nnetworks:\n  mqtt-net:\n',a="AGENT_TAG=3.6.1\nAGENT_ID=00000000-0000-0000-0000-000000000007\nSOURCE_TAG=3.6.0\n",d='version: "3.6"\n\nservices:\n  source-mqtt-mock-client:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-source-mqtt-mockclient:${SOURCE_TAG:-latest}\n    depends_on:\n      - mosquitto-server-mqtt\n      - tributech-agent-mqtt\n      - source-mqtt\n    environment:\n      - MqttOptions__MQTTHost=mosquitto-server-mqtt\n      - Logging__LogLevel__Default=Debug\n      - MockOptions__Streams__0__Topic=test/bar\n      - MockOptions__Streams__0__StreamEncoding=3 # double\n      - MockOptions__Streams__0__Interval=00:00:05.000\n    networks:\n      - mqtt-net\n    restart: unless-stopped\n',l={title:"MQTT Source",sidebar_position:1},h=void 0,u={},m=[{value:"Setup",id:"setup",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Value Change Options",id:"value-change-options",level:3},{value:"Providing Data",id:"providing-data",level:2},{value:"MQTT Explorer",id:"mqtt-explorer",level:3},{value:"MockClient",id:"mockclient",level:3},{value:"Modify docker-compose.override.yml",id:"modify-docker-composeoverrideyml",level:4}];function g(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The Tributech Agent supports the integration of external data sources using the ",(0,s.jsx)(t.a,{href:"https://mqtt.org/",children:(0,s.jsx)(t.strong,{children:"MQTT messaging protocol"})})," with the Tributech MQTT Source. The MQTT Source itself is configured via the Twin Configuration and will be described in the following sections."]}),"\n",(0,s.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(t.p,{children:["The Tributech MQTT Source image can be started without any dependencies but will not be functional without a valid Twin Configuration or MessageBroker connect to the Tributech Agent. The TwinConfiguration can be provided via the Tributech Node (recommended) or MessageBroker (see ",(0,s.jsx)(t.a,{href:"../source_integration#twin-model",children:"Source Integration"}),"). The MQTT Source will automatically connect to the Tributech Agent if the Tributech Agent is running and the MQTT Source is configured with the correct MessageBroker settings."]}),"\n",(0,s.jsx)(t.p,{children:"In the following part we will describe the setup of a Tributech MQTT Source."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Setup the ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"docker environment"})})," by creating a ",(0,s.jsx)(t.code,{children:".env"})," file with the following content and replace the placeholder values with your values:"]}),"\n"]}),"\n",(0,s.jsx)(o.A,{className:"language-plain",title:".env",children:a}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Setup the ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"docker-compose.yml"})})," file by creating a ",(0,s.jsx)(t.code,{children:"docker-compose.yml"})," file with the following content in the same folder as the ",(0,s.jsx)(t.code,{children:".env"})," file:"]}),"\n"]}),"\n",(0,s.jsx)(o.A,{className:"language-yml",title:"docker-compose.yml",children:c}),"\n",(0,s.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["After setting up the Tributech MQTT Source we need to link it to the Tributech Node (see ",(0,s.jsx)(t.a,{href:"/3.6.0/tributech_agent/quickstart#link-agent",children:"QuickStart"}),") and configure the TwinConfiguration."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"&quot;Configure Agent",src:n(66855).A+"",width:"1909",height:"351"})}),"\n",(0,s.jsx)(t.p,{children:"We can now add by right clicking the Device Edge entry a new MQTT Source."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"&quot;Add MQTT Source",src:n(61115).A+"",width:"711",height:"587"})}),"\n",(0,s.jsx)(t.p,{children:"After right clicking on the MQTT Source entry we can add a new MQTT Stream."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"&quot;Add MQTT Stream",src:n(7598).A+"",width:"1161",height:"599"})}),"\n",(0,s.jsxs)(t.p,{children:["We can now adjust the stream to our requirements. The following example shows how to setup a stream for a double value with the display name MQTT Stream and the MQTT Topic ",(0,s.jsx)(t.code,{children:"test/#"}),". For custom topics, two wildcards are supported:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"A '#' character represents a complete sub-tree of the hierarchy and thus must be the last character in a subscription topic string, such as test/#. This will match any topic starting with test/, such as test/1/TEMP and test/2/HUMIDITY."}),"\n",(0,s.jsx)(t.li,{children:"A '+' character represents a single level of the hierarchy and is used between delimiters. For example, test/+/TEMP will match test/1/TEMP and test/2/TEMP."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["We can save the settings by clicking on the ",(0,s.jsx)(t.code,{children:"SAVE IN WORKSPACE"})," button in the bottom right corner."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"&quot;Add MQTT Stream",src:n(8493).A+"",width:"2553",height:"1119"})}),"\n",(0,s.jsxs)(t.p,{children:["We can repeat this process for all required streams for the MQTT Source. An important note is that the MQTT Source will only work when there are no overlapping topics, i.e. ",(0,s.jsx)(t.code,{children:"test/#"})," and ",(0,s.jsx)(t.code,{children:"test/+/TEMP"})," are not allowed to be configured for the same MQTT Source.\nAfter we have configured the MQTT Source we can apply the configuration to the Tributech Agent by clicking on the ",(0,s.jsx)(t.code,{children:"APPLY CONFIGURATION"})," button in the top right corner."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"&quot;Add MQTT Stream",src:n(28563).A+"",width:"2556",height:"406"})}),"\n",(0,s.jsxs)(t.p,{children:["This completes the configuration of the MQTT Source and we can now send data to the MQTT Source either via an MQTT Client Application like ",(0,s.jsx)(t.a,{href:"https://mqttx.app/",children:"MQTTX"}),", ",(0,s.jsx)(t.a,{href:"http://mqtt-explorer.com/",children:"MQTT Explorer"})," or with our ",(0,s.jsx)(t.a,{href:"#mockclient",children:"Tributech MQTT MockClient"}),". The Tributech MQTT Source MockClient is currently only for testing purposes and works only in combination with our Tributech MQTT Source."]}),"\n",(0,s.jsx)(t.h3,{id:"value-change-options",children:"Value Change Options"}),"\n",(0,s.jsxs)(t.p,{children:["The basic handling of Value Change Options (VCO) can be found in ",(0,s.jsx)(t.a,{href:"/3.6.0/tributech_agent/source_integration#value-change-options",children:"Source Integration"}),". This section contains the concrete handling of the ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"Step (Delta)"})})," for the simulated source. The following list contains the description for each supported ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"Stream Data Encoding"})})," where ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"X"})})," represents the value for ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"Step (Delta)"})}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"Double"})}),", ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"Int32"})}),", ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"Long"})}),", ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"Float"})}),": defines the minimum difference between values to be submitted, the change is always compared to the last successful submitted value, e.g. if ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"X"})}),"= 3 if the double values 1, 2, 5, 8, 10, 11, 14 are received by the Tributech Source only 1, 5, 8, 11, 14 will be submitted."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"Byte Array"})}),": will only be submitted if the current and last submitted value are not equal"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"String UTF 8"})}),": will only be submitted if the current and last submitted value are not equal"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"Boolean"})}),": will only be submitted if the current and last submitted value are not equal"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"providing-data",children:"Providing Data"}),"\n",(0,s.jsxs)(t.p,{children:["In the following section we want to outline two different ways to provide data to the MQTT Source. The first way is to use the ",(0,s.jsx)(t.a,{href:"http://mqtt-explorer.com/",children:(0,s.jsx)(t.strong,{children:"MQTT Explorer"})})," to send data to the MQTT Source. The second way is to use the MQTT MockClient to send data to the MQTT Source. In our example we can access the MQTT MessageBroker on port 1833 (need to match your ",(0,s.jsx)(t.code,{children:"mosquitto-server-mqtt"})," service in the ",(0,s.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(16723).A+"",children:(0,s.jsx)(t.code,{children:"docker-compose.yml"})}),")."]}),"\n",(0,s.jsx)(t.h3,{id:"mqtt-explorer",children:"MQTT Explorer"}),"\n",(0,s.jsxs)(t.p,{children:["With the ",(0,s.jsx)(t.a,{href:"http://mqtt-explorer.com/",children:(0,s.jsx)(t.strong,{children:"MQTT Explorer"})})," we can directly send json payload to a specific topic. The MQTT Explorer can connect to the MessageBroker on port 1833 (need to match your ",(0,s.jsx)(t.code,{children:"mosquitto-server-mqtt"})," service in the ",(0,s.jsx)(t.code,{children:"docker-compose.yml"}),"). The example will submit the following payload data to the MQTT Source previously configured in ",(0,s.jsx)(t.a,{href:"#setup",children:"Setup"})," :"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "Timestamp": "2023-07-13T05:50:07.1003104+00:00",\n  "Value": "530zo/N+jsA="\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["We can post the data to the MQTT Source by clicking on the ",(0,s.jsx)(t.code,{children:"Publish"})," button in the top right corner."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Mqtt Explorer publish",src:n(4618).A+"",width:"1453",height:"558"})}),"\n",(0,s.jsxs)(t.p,{children:["The MQTT Source will now receive the data, process it and send it to the Tributech Agent. The Tributech Agent will forward the data to the Tributech Node where with can inspect the values. We can follow this data flow on the left hand side of the MQTT Explorer by observing which topics receive data, i.e. ",(0,s.jsx)(t.code,{children:"edge/{agent-id}/value/ValueSource"})," is our Tributech Agent.\nThe data can be viewed in the Tributech Node by clicking on the ",(0,s.jsx)(t.code,{children:"MQTT Stream"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Per default we will show directly the ",(0,s.jsx)(t.code,{children:"Stream Data Encoding"})," datatype tab with the timestamp and value.\n",(0,s.jsx)(t.img,{alt:"Mqtt Explorer publish",src:n(89988).A+"",width:"1720",height:"541"})]}),"\n",(0,s.jsxs)(t.p,{children:["We can switch to the ",(0,s.jsx)(t.code,{children:"Byte Array"})," tab to see the data we have submitted.\nThe value and timestamp (in UTC) are displayed and match our submitted data."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Mqtt Explorer publish",src:n(16954).A+"",width:"1729",height:"546"})}),"\n",(0,s.jsx)(t.h3,{id:"mockclient",children:"MockClient"}),"\n",(0,s.jsxs)(t.p,{children:["We provide an additional ",(0,s.jsx)(t.code,{children:"docker-compose.override.yml"})," below to include a MockClient. This setup can be used to send data to the MQTT Source without external tools. The MockClient is only for testing purposes and should not be used in production. In order to start the the MockClient with the Tributech MQTT Source copy the ",(0,s.jsx)(t.code,{children:"docker-compose.override.yml"})," file in the same folder as the ",(0,s.jsx)(t.code,{children:"docker-compose.yml"})," before using the ",(0,s.jsx)(t.code,{children:"docker-compose up"})," command. The following configuration shows how to setup the MockClient and send data to the MQTT Source for a stream double stream. The Custom-Topic needs to be inserted into the ",(0,s.jsx)(t.code,{children:"<custom-topic>"})," placeholder, e.g. ",(0,s.jsx)(t.code,{children:"test/foo"}),":"]}),"\n",(0,s.jsx)(o.A,{className:"language-yml",title:"docker-compose.override.yml",children:d}),"\n",(0,s.jsxs)(t.p,{children:["After starting the MockClient we need to apply the configuration again from the Tributech Node to our Tributech MQTT Source. For this we need to go back to the Source configuration window in the Tributech Node and click on the ",(0,s.jsx)(t.code,{children:"APPLY CONFIGURATION"})," button again. Then we can see the data in the Tributech Node. The following example shows the data for the double stream."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"MQTT Mock publish",src:n(64170).A+"",width:"1703",height:"891"})}),"\n",(0,s.jsx)(t.h4,{id:"modify-docker-composeoverrideyml",children:"Modify docker-compose.override.yml"}),"\n",(0,s.jsxs)(t.p,{children:["We can adjust the data generation to our needs by modifying the ",(0,s.jsx)(t.code,{children:"docker-compose.override.yml"})," file, see ",(0,s.jsx)(t.a,{href:"https://docs.docker.com/compose/",children:"Docker"})," for details on how to setup the environment for docker-compose."]}),"\n",(0,s.jsxs)(t.p,{children:["We can send different datatypes to specified streams and modify the following ",(0,s.jsx)(t.code,{children:"environment"})," variables to change the stream generation behaviour:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"StreamEncoding"}),": Sets the datatype which will be generated based on a numeric value:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Datatype"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"byte-array"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"float"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"double"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"int"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"long"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"6"}),(0,s.jsx)(t.td,{children:"string_utf8"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"8"}),(0,s.jsx)(t.td,{children:"boolean"})]})]})]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Interval"}),": The interval (default 10sec) in which the values are generated in TimeSpan format, e.g. 00:00:05 for 5 seconds, see ",(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings",children:"Microsoft"})," for details on TimeSpan format"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"MinValue"})," (default -1000): The minimum value that can be generated (for bytearrays and string this is the length of the array/string, default 1)"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"MaxValue"})," (default 1000): The max value that can be generated (for bytearrays and string this is the length of the array/string)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In Order to add more streams the environment ",(0,s.jsx)(t.code,{children:"MockOptions"})," setting can be adjusted based on the AppSettings.json configuration capabilities, see ",(0,s.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0",children:"Microsoft"})," for details on how to setup the environment variables. The following setup shows how to add a second stream float stream to the MockClient:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"    ...\n    environment:\n      ...\n      # Stream 1\n      - MockOptions__Streams__0__Topic=xxo/foo\n      - MockOptions__Streams__0__StreamEncoding=3 # double\n\n      # Stream 2\n      - MockOptions__Streams__0__Topic=xxo/foo\n      - MockOptions__Streams__0__StreamEncoding=2 # float\n      ...\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},7598:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/node-source-mqtt-add-stream-72e9b38539a9c5a9b3675c313997d9e9.png"},8493:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/node-source-mqtt-config-stream-694891d8b325b3ffee059e89e438104e.png"},16723:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/files/docker-compose-b3f1583682014f5266db66d7f60926ec.yml"},16954:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/node-source-mqtt-stream-value-bytearray-194eccd3686342fdb83825158a24a2bf.png"},28563:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/node-source-mqtt-apply-config-16361f3cc5e4ef2e48f68e83128cc22c.png"},61115:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/node-source-mqtt-add-e97d86f1c70ab2d4c883c37419b7c9bd.png"},64170:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/node-source-mqtt-stream-values-mock-99f9ae128dda66dbdad3fc994fc52ea2.png"},66855:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/node-agent-configure-7ae7cf405f48c53a50f626b64ce56f49.png"},89988:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/node-source-mqtt-stream-value-double-05c0f7d575db33e1b3e170cbbd727897.png"}}]);