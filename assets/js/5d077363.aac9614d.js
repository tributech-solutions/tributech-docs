"use strict";(self.webpackChunktributech_docs=self.webpackChunktributech_docs||[]).push([[6281],{60806:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return m}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=n(36110),l=n(85608),s=["components"],d={title:"Agent Integration",sidebar_position:3},c=void 0,p={unversionedId:"tributech_agent/agent_integration",id:"version-3.6.0/tributech_agent/agent_integration",title:"Agent Integration",description:"In the following section we describe in detail how to setup and link an Tributech Agent with an existing Tributech Node.",source:"@site/versioned_docs/version-3.6.0/tributech_agent/agent_integration.mdx",sourceDirName:"tributech_agent",slug:"/tributech_agent/agent_integration",permalink:"/tributech_agent/agent_integration",draft:!1,editUrl:"https://github.com/tributech-solutions/tributech-dsk-docs/edit/master/versioned_docs/version-3.6.0/tributech_agent/agent_integration.mdx",tags:[],version:"3.6.0",sidebarPosition:3,frontMatter:{title:"Agent Integration",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"QuickStart",permalink:"/tributech_agent/quickstart"},next:{title:"Source Integration",permalink:"/tributech_agent/source_integration"}},u={},m=[{value:"Deployments",id:"deployments",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Hardware Requirements",id:"hardware-requirements",level:4},{value:"Software Requirements",id:"software-requirements",level:4},{value:"Network requirements",id:"network-requirements",level:4},{value:"Docker-Compose Setup",id:"docker-compose-setup",level:3},{value:"Configurations",id:"configurations",level:2},{value:"Authentication",id:"authentication",level:3},{value:"Docker-Compose environment",id:"docker-compose-environment",level:3},{value:"Link Agent",id:"link-agent",level:2},{value:"Verify",id:"verify",level:2},{value:"Validation Graph",id:"validation-graph",level:3},{value:"Validation Table",id:"validation-table",level:3}],h={toc:m};function g(e){var t=e.components,d=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},h,d,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In the following section we describe in detail how to setup and link an Tributech Agent with an existing Tributech Node.\nWe will show how to gain access to the Tributech Docker Registry and startup an Tributech Agent with a ",(0,i.kt)("a",{parentName:"p",href:"/tributech_agent/sources/simulated_source"},"Tributech Simulated Source"),"."),(0,i.kt)("h2",{id:"deployments"},"Deployments"),(0,i.kt)("p",null,"First we need to setup an environment for the execution of the Tributech Software components. We will use\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"Docker Compose")," to run a Tributech Agent and Tributech Simulated Source in the Docker Containers. If you want to use any other container runtime (e.g. containerd) please create a support ticket or talk to your contact person at Tributech."),(0,i.kt)("h3",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"The environment must meet the following hardware and software requirements:"),(0,i.kt)("h4",{id:"hardware-requirements"},"Hardware Requirements"),(0,i.kt)("p",null,"The following table shows the recommended minimum hardware requirements for the overall system."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Minimum Requirement"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Additional Information"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"CPU"),(0,i.kt)("td",{parentName:"tr",align:"left"},"1 Core (x86-64 / ARM 32/64) or more"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The minimum requirements for small and medium workloads.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"RAM"),(0,i.kt)("td",{parentName:"tr",align:"left"},"1 GB"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The minimum requirements for small and medium workloads.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Storage"),(0,i.kt)("td",{parentName:"tr",align:"left"},"221 MB"),(0,i.kt)("td",{parentName:"tr",align:"left"},"A typical setup requires around 500MB consisting of the Tributech Agent = 221 MB, the Tributech Source = 227 MB and the Mosquitto broker = 11,6 MB.")))),(0,i.kt)("p",null,"The following table shows an example of a performance test with a typical IoT gateway or low-end servers. The results include the consumed CPU and RAM resources of the Tributech Agent, in addition you also need to consider the resource consumption of your selected source and your own services."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Value per second"),(0,i.kt)("th",{parentName:"tr",align:"left"},"CPU load(1 core 2.2GHz)"),(0,i.kt)("th",{parentName:"tr",align:"left"},"RAM"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"1"),(0,i.kt)("td",{parentName:"tr",align:"left"},"0,54%"),(0,i.kt)("td",{parentName:"tr",align:"left"},"103,1MB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"10"),(0,i.kt)("td",{parentName:"tr",align:"left"},"2,45%"),(0,i.kt)("td",{parentName:"tr",align:"left"},"112,2MB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"100"),(0,i.kt)("td",{parentName:"tr",align:"left"},"13,55%"),(0,i.kt)("td",{parentName:"tr",align:"left"},"129MB")))),(0,i.kt)("p",null,"If you have any questions regarding infrastructure requirements, please talk to your contact person at Tributech or create a support ticket."),(0,i.kt)("h4",{id:"software-requirements"},"Software Requirements"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Requirement"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Additional Information"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"OS"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Any current Linux Distribution"),(0,i.kt)("td",{parentName:"tr",align:"left"},"We recommend to select a managed solution from an IoT device or infrastructure provider which also takes care of operating system updates for example a vendor like ",(0,i.kt)("a",{parentName:"td",href:"https://www.welotec.com/"},"Welotec"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Runtime"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Any current Docker environment"),(0,i.kt)("td",{parentName:"tr",align:"left"},"We recommend a managed solution for docker container orchestration e.g.: ",(0,i.kt)("a",{parentName:"td",href:"https://azure.microsoft.com/de-de/products/iot-edge"},"Azure IoT Edge Runtime"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"File System"),(0,i.kt)("td",{parentName:"tr",align:"left"},"any suppoerted docker file system"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The user/instance which runs the docker containers must have read and write permission for the volume where the docker containers are situated.")))),(0,i.kt)("h4",{id:"network-requirements"},"Network requirements"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Requirement"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Additional Information"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Communication protocol"),(0,i.kt)("td",{parentName:"tr",align:"left"},"MQTTS"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Communication protocol used between Tributech Agent and Node. MQTTS is the secure version of the MQTT protocol using TLS.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Port"),(0,i.kt)("td",{parentName:"tr",align:"left"},"1883"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Communication port used between Tributech Agent and Node.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Endpoint URL"),(0,i.kt)("td",{parentName:"tr",align:"left"},"<name",">",".tributech-node.com"),(0,i.kt)("td",{parentName:"tr",align:"left"},"MQTT endpoint on server (platform) side.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Firewall rules"),(0,i.kt)("td",{parentName:"tr",align:"left"},"allow outbound traffic for endpoint URL for port 1883"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Tributech Agent needs to be allowed to communicate with the platform, typically required for restricted enterprise networks.")))),(0,i.kt)("h3",{id:"docker-compose-setup"},"Docker-Compose Setup"),(0,i.kt)("p",null,"The Tributech Agent Services can be run using ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/"},(0,i.kt)("strong",{parentName:"a"},"Docker Engine"))," as a container runtime. We use ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},(0,i.kt)("strong",{parentName:"a"},"Docker Compose"))," for management/orchestration of the Docker services."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get update\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho \\\n"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io\nsudo apt-get install docker-compose\n")),(0,i.kt)("p",null,"If you want to enable ",(0,i.kt)("inlineCode",{parentName:"p"},"non-root users")," to execute docker commands visit ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/linux-postinstall/"},"Post-install"),"."),(0,i.kt)("h2",{id:"configurations"},"Configurations"),(0,i.kt)("p",null,"After completing the installation process for our environment we now need to retrieve the Tributech Docker Images and configure the Docker-Compose environment as follows:"),(0,i.kt)("h3",{id:"authentication"},"Authentication"),(0,i.kt)("p",null,"In order to gain access to the Tributech Agent docker image we need to provide docker with the credentials to access the private Tributech Docker Registry. The authentication information can be found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Secrets")," section of the Tributech Node."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"**&quot;Tributech Node Secrets area**",src:n(36725).Z,width:"1433",height:"442"})),(0,i.kt)("p",null,"The following command provides docker with the required permissions to access the private Tributech Docker Registry.\nFor more information on docker authentication visit ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/login/"},"docker login"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"echo <Client Secret> | docker login --username <Client ID> --password-stdin <Endpoint>\n")),(0,i.kt)("h3",{id:"docker-compose-environment"},"Docker-Compose environment"),(0,i.kt)("p",null,"We have a ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," prepared for an quick and easy setup with a ",(0,i.kt)("a",{parentName:"p",href:"/tributech_agent/sources/simulated_source"},"Tributech Simulated Source"),":"),(0,i.kt)(o.Z,{className:"language-yml",title:"docker-compose.yml",mdxType:"CodeBlock"},l.Z),(0,i.kt)("p",null," The docker-compose.yml can be used without any changes. However, we also need to create a ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file which contains the configuration details, for our docker-compose environment. The content of the file contains all relevant information about the docker image tags and the AGENT_ID. The ",(0,i.kt)("inlineCode",{parentName:"p"},"AGENT_ID")," is a GUID that can be freely chosen, for easy recognition we use ",(0,i.kt)("inlineCode",{parentName:"p"},"00000000-0000-0000-0000-000000000007"),". We will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"AGENT_ID")," later on in the linking process to validate that we link the correct Tributech Agent with our Tributech Node. In our example the  ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file looks as follows:"),(0,i.kt)(o.Z,{className:"language-plain",title:".env",mdxType:"CodeBlock"},"AGENT_TAG=3.6.0\nAGENT_ID=00000000-0000-0000-0000-000000000007\nSOURCE_TAG=3.6.0\n"),(0,i.kt)("p",null,"We can now ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Startup"))," the environment by running the following command:"),(0,i.kt)(o.Z,{className:"bash",title:"terminal",mdxType:"CodeBlock"},"docker-compose up -d"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Validate"))," that all containers are running. The output should return that every container is in the state ",(0,i.kt)("inlineCode",{parentName:"p"},"Up")),(0,i.kt)(o.Z,{className:"bash",title:"terminal",mdxType:"CodeBlock"},"docker-compose ps"),(0,i.kt)("p",null,"If you encounter problems with starting the containers please consult the official docker documentation ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/login/"},"docker login")," and ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/reference/"},"docker compose CLI"),"."),(0,i.kt)("h2",{id:"link-agent"},"Link Agent"),(0,i.kt)("p",null,"After successfully starting the docker compose setup, in the previous step, we can now link the agent with the Tributech Node. Without completing the linking process the Tributech Node will not be able to receive any data from the Tributech Agent. In the agent overview we can click ",(0,i.kt)("inlineCode",{parentName:"p"},"LINK NEW AGENT")," to initialize this process."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"***Agent Linking***",src:n(73887).Z,width:"1734",height:"338"})),(0,i.kt)("p",null,"Our prepared ",(0,i.kt)("a",{target:"_blank",href:n(39101).Z},"docker-compose.yml")," from the previous step exposes the port ",(0,i.kt)("inlineCode",{parentName:"p"},"5000")," of the Agent to interact with the Tributech Node. The port of you environment must be reachable from the Tributech Node. If you are running the Tributech Node on a virtual machine you can use the following command to forward the port to your local machine:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ssh <vm-user>@<vm-ip> -L <local-port>:localhost:5000\n# e.g.\nssh root@100.101.102.103 -L 5000:localhost:5000\n")),(0,i.kt)("p",null,"After the port forwarding is established we can start the linking process by clicking ",(0,i.kt)("inlineCode",{parentName:"p"},"Connect"),":"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"***Agent Connect***",src:n(10340).Z,width:"1008",height:"523"})),(0,i.kt)("p",null,"After pressing connect, we can see the AGENT_ID ",(0,i.kt)("inlineCode",{parentName:"p"},"00000000-0000-0000-0000-000000000007")," we previously defined in our ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file for the docker environment. If the AGENT_ID is correct we can click ",(0,i.kt)("inlineCode",{parentName:"p"},"Link/Relink Agent")," to continue the linking process:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"***Linking Connect link***",src:n(34920).Z,width:"1413",height:"510"})),(0,i.kt)("p",null,"Now we can finish the linking process by clicking ",(0,i.kt)("inlineCode",{parentName:"p"},"Link/Relink Agent"),":"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"***Connect link***",src:n(69503).Z,width:"1090",height:"443"})),(0,i.kt)("p",null,"After the successfully completed linking process, we can configure our desired ",(0,i.kt)("a",{parentName:"p",href:"/tributech_agent/source_integration"},"Tributech Agent Source")," for the Agent."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"***Connect link configuration***",src:n(54151).Z,width:"1908",height:"665"})),(0,i.kt)("h2",{id:"verify"},"Verify"),(0,i.kt)("p",null,"In order to detect ",(0,i.kt)("a",{parentName:"p",href:"https://www.tributech.io/blog/cybersecurity-threat-data-tampering"},"data tampering")," we provide the possibility to audit each stream individually and quickly find failed validations. We can either use graph a to visually find problems or a table to filter proofs with predefined filters. We will describe both options in the following sections."),(0,i.kt)("h3",{id:"validation-graph"},"Validation Graph"),(0,i.kt)("p",null,"The Validation Graph can be displayed by clicking ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Display Audit Result"))," and contains three different colors:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"gray"))," - validation is pending"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"green"))," - validation was successful"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"red"))," - validation was not successful")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"***Audit Graph***",src:n(29253).Z,width:"1725",height:"741"})),(0,i.kt)("h3",{id:"validation-table"},"Validation Table"),(0,i.kt)("p",null,"In Order to view every created proof with its validation history in table format we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"AUDIT RESULTS")," button from the stream overview:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"***Select audit***",src:n(26911).Z,width:"1712",height:"781"})),(0,i.kt)("p",null,"The audit results table view provides the possibility to filter the audit results based on the validation result. We can use the filter to quickly find failed validations and inspect the validation history for a given proof.\nWe want to highlight some features to quickly get started with the audit:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Overview - Display all created proofs in timespan sorted by Proof Timestamp\n",(0,i.kt)("img",{alt:"***Audit overview***",src:n(44825).Z,width:"1717",height:"893"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Filter - Limit the displayed audit results based on the validation result\n",(0,i.kt)("img",{alt:"Alt text",src:n(216).Z,width:"1717",height:"893"})),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("img",{alt:"Alt text",src:n(301).Z,width:"1709",height:"668"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Retrigger - Validation can be triggered manually and the table view will always display the latest validation result for any proof."),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("img",{alt:"***Audit retrigger***",src:n(34718).Z,width:"1724",height:"614"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"History - By selecting a proof row we can inspect the validation history for each proof."),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("img",{alt:"***Audit retrigger history***",src:n(44151).Z,width:"1649",height:"739"})))))}g.isMDXComponent=!0},39101:function(e,t,n){t.Z=n.p+"assets/files/docker-compose-615b57b524d37979095b3330fc69198d.yml"},85608:function(e,t){t.Z='version: "3.6"\n\nservices:\n  source-simulated:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-source-simulated:${SOURCE_TAG:-latest}\n    depends_on:\n      - mosquitto-server-simulated\n      - tributech-agent-simulated\n    environment:\n      - MqttOptions__MQTTHost=mosquitto-server-simulated\n      - Logging__LogLevel__Default=Debug\n    networks:\n      - simulated-net\n    restart: unless-stopped\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "2m"\n        max-file: "5"\n\n  tributech-agent-simulated:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-agent:${AGENT_TAG:-latest}\n    depends_on:\n      - mosquitto-server-simulated\n    environment:\n      - Logging__LogLevel__Default=Debug\n      - Logging__Console__FormatterName=simple\n      - MqttOptions__MQTTHost=mosquitto-server-simulated\n      - EdgeDeviceOptions__AgentID=${AGENT_ID:?"The variable AGENT_ID needs to be configured in the .env file."}\n    ports:\n      - "5000:80"\n    networks:\n      - simulated-net\n    volumes:\n      - ./volumes/simulated/agent/:/app/data # volume mapping for permanent storage of keys and datatwin file\n    restart: unless-stopped\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "2m"\n        max-file: "5"\n\n  mosquitto-server-simulated:\n    image: eclipse-mosquitto:${MQTT_TAG:-1.6}\n    networks:\n      - simulated-net\n    # ports:\n    # - \'1883:1883\' # MQTT\n    # - "127.0.0.1:9001:9001" # web-socket\n    restart: unless-stopped\n\nnetworks:\n  simulated-net:\n\n'},69503:function(e,t,n){t.Z=n.p+"assets/images/node-agent-linking-connect-link-2-3ddd990522ae730624f5cdbe3bc82f9e.png"},54151:function(e,t,n){t.Z=n.p+"assets/images/node-agent-linking-connect-link-configure-06fedd0258c645c5866f8863140761dd.png"},34920:function(e,t,n){t.Z=n.p+"assets/images/node-agent-linking-connect-link-53a5b77ab0d1a746d6f45360e7153bc4.png"},10340:function(e,t,n){t.Z=n.p+"assets/images/node-agent-linking-connect-6d6ca8578fce09e0b26f9176457dee18.png"},73887:function(e,t,n){t.Z=n.p+"assets/images/node-agent-linking-9d36be29b7fd8dce413826efcb0ded3d.png"},29253:function(e,t,n){t.Z=n.p+"assets/images/node-source-audit-graph-a2e89f9e399364db896efcd0bc7a7f26.png"},301:function(e,t,n){t.Z=n.p+"assets/images/node-source-audit-overview-filter-details-446db3484468c76a4dd07a25059d6bc9.png"},216:function(e,t,n){t.Z=n.p+"assets/images/node-source-audit-overview-filter-9d9d8fb9e0e92db134bac4ed75f0a5fa.png"},44825:function(e,t,n){t.Z=n.p+"assets/images/node-source-audit-overview-84a6d4a98dc5392032260e4046179619.png"},44151:function(e,t,n){t.Z=n.p+"assets/images/node-source-audit-retrigger-history-bcc70597811b086e8708cd9e51c26fc4.png"},34718:function(e,t,n){t.Z=n.p+"assets/images/node-source-audit-retrigger-78175bd27017c1e97ca0c394feecf083.png"},26911:function(e,t,n){t.Z=n.p+"assets/images/node-source-select-audit-6e6e1c7e6ede89ae09f401ff1686a3b7.png"},36725:function(e,t,n){t.Z=n.p+"assets/images/secrets-docker-registry-64dbad486febf504ec046edf1cb53da5.png"}}]);