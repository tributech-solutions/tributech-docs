"use strict";(self.webpackChunktributech_docs=self.webpackChunktributech_docs||[]).push([[3398],{2406:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-agent-management-agent-activation-c5faaa13105edce78e88add7ae264405.png"},30712:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-agent-management-add-enrollment-9349a53fbb1a1ff8e592842885e870d7.png"},38710:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/agent-bond-activated-49d7abf6079d14c0c4164c1f4907928c.png"},40563:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/EdgeDeviceOverviewFocusAgentToNode-14da8bef1d06eab3ccdf355b93b4ae8d.png"},46879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>b,frontMatter:()=>l,metadata:()=>i,toc:()=>g});const i=JSON.parse('{"id":"tributech_agent/setup","title":"Setup","description":"In the following section we describe how to setup and activate a Tributech Agent with an existing Tributech Node.","source":"@site/versioned_docs/version-4.0.0/tributech_agent/setup.mdx","sourceDirName":"tributech_agent","slug":"/tributech_agent/setup","permalink":"/4.0.0/tributech_agent/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/tributech-solutions/tributech-dsk-docs/edit/master/versioned_docs/version-4.0.0/tributech_agent/setup.mdx","tags":[],"version":"4.0.0","sidebarPosition":4,"frontMatter":{"title":"Setup","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Quickstart","permalink":"/4.0.0/tributech_agent/quickstart"},"next":{"title":"Source Integration","permalink":"/4.0.0/tributech_agent/source_integration"}}');var r=n(74848),s=n(28453),o=n(21028);const c='version: "3.6"\n\nservices:\n  source-simulated:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-source-simulated:${SOURCE_TAG:-latest}\n    depends_on:\n      - mosquitto-server-simulated\n      - tributech-agent\n    environment:\n      - MqttOptions__MQTTHost=mosquitto-server-simulated\n      - Logging__LogLevel__Default=Debug\n    networks:\n      - simulated-net\n    restart: unless-stopped\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "2m"\n        max-file: "5"\n\n  tributech-agent:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-agent:${AGENT_TAG:-latest}\n    depends_on:\n      - mosquitto-server-simulated\n    environment:\n      - Logging__LogLevel__Default=Debug\n      - Logging__Console__FormatterName=simple\n      - MqttOptions__MQTTHost=mosquitto-server-simulated\n      - EdgeDeviceOptions__AgentID=${AGENT_ID:?"The Tributech Agent requires a GUID"}\n      - EdgeDeviceOptions__NodeUrl=${NODE_URL:?"The Tributech Node Url is required"}\n      - EnrollmentOptions__EnrollmentCertBase64=${ENROLLMENT_CERT_BASE64:?"The base64 encoded Enrollment Cert is required"}\n      - EnrollmentOptions__EnrollmentKeyBase64=${ENROLLMENT_KEY_BASE64:?"The base64 encoded Enrollment Key is required"}\n    # ports:\n    #   - "5000:8080"\n    networks:\n      - simulated-net\n    volumes:\n      - ./volumes/simulated/agent/:/app/data # volume mapping for permanent storage of keys and datatwin file\n    restart: unless-stopped\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "2m"\n        max-file: "5"\n\n  mosquitto-server-simulated:\n    image: eclipse-mosquitto:${MQTT_TAG:-1.6}\n    networks:\n      - simulated-net\n    # ports:\n    # - \'1883:1883\' # MQTT\n    # - "127.0.0.1:9001:9001" # web-socket\n    restart: unless-stopped\n\nnetworks:\n  simulated-net:\n\n',a='services:\n  tributech-agent:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-agent:${AGENT_TAG:-latest}\n    depends_on:\n      - mosquitto-server\n    environment:\n      - MqttOptions__MQTTHost=mosquitto-server\n      - EdgeDeviceOptions__AgentID=${AGENT_ID:?"The Tributech Agent requires a GUID"}\n      - EdgeDeviceOptions__NodeUrl=${NODE_URL:?"The Tributech Node Url is required"}\n      - EnrollmentOptions__EnrollmentCertBase64=LS0tLS1CR...VEUgS0VZLS0tLS5X\n      - EnrollmentOptions__EnrollmentKeyBase64=LS0tLS1CRU...VEUgS0VZLS0tLS0K\n    volumes:\n      - ./bin/data:/app/data #default directory for keys and datatwin file\n    restart: unless-stopped\n\n  mosquitto-server:\n    image: eclipse-mosquitto:${MQTT_TAG:-1.6}\n    restart: unless-stopped',h='services:\n  tributech-agent:\n    image: ${DOCKER_REGISTRY-tributech.azurecr.io/}tributech-agent:${AGENT_TAG:-latest}\n    depends_on:\n      - mosquitto-server\n    environment:\n      - MqttOptions__MQTTHost=mosquitto-server\n      - EdgeDeviceOptions__AgentID=${AGENT_ID:?"The Tributech Agent requires a GUID"}\n      - EdgeDeviceOptions__NodeUrl=${NODE_URL:?"The Tributech Node Url is required"}\n    volumes:\n      - ./bin/data:/app/data #default directory for keys and datatwin file\n      - ./enrollment:/app/enrollment # local enrollment folder mounted to /app/enrollment\n    restart: unless-stopped\n\n  mosquitto-server:\n    image: eclipse-mosquitto:${MQTT_TAG:-1.6}\n    restart: unless-stopped';var d=n(95950);const l={title:"Setup",sidebar_position:4},u=void 0,m={},g=[{value:"General Process Overview",id:"general-process-overview",level:2},{value:"Authentication Certificates (Enrollment)",id:"authentication-certificates-enrollment",level:2},{value:"Docker volumes",id:"docker-volumes",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Starting a Tributech Agent",id:"starting-a-tributech-agent",level:2},{value:"Activate Agent",id:"activate-agent",level:2}];function p(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["In the following section we describe how to setup and activate a Tributech Agent with an existing ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"}),".\nWe assume that all ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/requirements",children:"Requirements"})," are met and a running ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," is accessable. The goal is to create a basic setup with a ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/sources/simulated_source",children:"Simulated Tributech Source"})," that will generate random data and send it to the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/overview",children:"Tributech Agent"})," via MQTT. The ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/overview",children:"Tributech Agent"})," will create proofs for the received values which can later be inspected in the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Configure Agent",src:n(97540).A+"",width:"589",height:"203"})}),"\n",(0,r.jsxs)(t.p,{children:["\u26a0\ufe0f"," ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/requirements",children:"Requirements"})," must be satisfied"]}),"\n",(0,r.jsxs)(t.p,{children:["\u26a0\ufe0f"," ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," must be running and accessable"]}),"\n",(0,r.jsxs)(t.p,{children:["We will use ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/engine/",children:(0,r.jsx)(t.strong,{children:"Docker Engine"})})," and ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/compose/",children:(0,r.jsx)(t.strong,{children:"Docker Compose"})})," in our examples to show how to get an edge device up and running with all the required services."]}),"\n",(0,r.jsx)(t.h2,{id:"general-process-overview",children:"General Process Overview"}),"\n",(0,r.jsxs)(t.p,{children:["In this section we want to show how a Tributech Agent is setup up and can be used to securely transfer\ncustomer data from an edge device to the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," for inspection\nand verification. The ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," is the common management point for\nall Tributech Agents connected to the Node. How a Tributech Agent operates and which Tributech Sources\nwill be able to submit data is defined in ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/agent/agent_configuration#configuring-an-agent",children:"Digital Twin Configuration"}),"  of an Agent.\nThis management of Agent is required after completing successfully the Agent ",(0,r.jsx)(t.a,{href:"#authentication-certificates-enrollment",children:"Enrollment"}),"\nProcess."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Tributech Architecture - Overview",src:n(78527).A+"",width:"759",height:"681"})}),"\n",(0,r.jsxs)(t.p,{children:["The communication between ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/source_integration",children:"Tributech Sources"})," and the Tributech Agent will take place on the same\nedge device via a local Message Broker connection. This channel is used on the one hand to send configurations and commands from Tribtech Agent to the Tributech Source and on the other hand to send data streams from the Tributech Source to the Agent."]}),"\n",(0,r.jsx)(t.h2,{id:"authentication-certificates-enrollment",children:"Authentication Certificates (Enrollment)"}),"\n",(0,r.jsxs)(t.p,{children:["Before starting a Tributech Agent we need to get a Certificate signed by the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"}),"\nthat is used during the initial authentication process to indicate that a Tribtech Agent is allowed to establish a MQTTS connection to the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"}),". The certificate handling and initial establishing of a connection to the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," is called ",(0,r.jsx)(t.code,{children:"Enrollment"})," and more information can be found in ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/agent/agent_management",children:"agent management"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"&quot;Configure Agent",src:n(40563).A+"",width:"609",height:"206"})}),"\n",(0,r.jsxs)(t.p,{children:["In order to create the certificate we visit the ",(0,r.jsx)(t.code,{children:"Enrollment"})," section in the Tributech Node UI and select\n",(0,r.jsx)(t.code,{children:"+ Add Enrollment"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Tributech Add Enrollment",src:n(30712).A+"",width:"4000",height:"1915"})}),"\n",(0,r.jsx)(t.p,{children:"This action leads to the following window, which contains all the information the user needs to create the certificate."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Tributech Certificate Generation UI",src:n(48950).A+"",width:"1920",height:"921"})}),"\n",(0,r.jsxs)(t.p,{children:["Download the script for the operating system of your choice ",(0,r.jsx)(t.a,{href:"https://github.com/tributech-solutions/tributech-enrollment/blob/main/Linux/generate-csr.sh",children:"Linux"}),"/",(0,r.jsx)(t.a,{href:"https://github.com/tributech-solutions/tributech-enrollment/blob/main/Windows/generate-csr.ps1",children:"Windows"})," and execute the script in a empty folder named ",(0,r.jsx)(t.code,{children:"enrollment"}),". Its important to note that the operating system does not\nneed to be identical to the Edge Device operating system. These Certificate Signing Request and certificates can be\ncreated once and reused for multiple Tributech Agents. After successful execution of the script upload the ",(0,r.jsx)(t.code,{children:"enrollment.csr"}),"\nin the Tributech Node UI Upload Dialog and submit it by clicking ",(0,r.jsx)(t.code,{children:"GENERATE CERTIFICATE"}),". A ",(0,r.jsx)(t.code,{children:"enrollment.crt"})," file is returned\nafter the successful generation and should be saved in the same folder next to the script. If problems or questions\noccur during this process please consult the ",(0,r.jsx)(t.a,{href:"https://github.com/tributech-solutions/tributech-enrollment/blob/main/README.md",children:"README"})," for more details."]}),"\n",(0,r.jsxs)(t.p,{children:["With the certificates present in a local folder, we call ",(0,r.jsx)(t.code,{children:"enrollment"}),", we can now provide the certificates in two different ways to the Tributech Agent either via ",(0,r.jsx)(t.code,{children:"environment variables"})," or via ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/storage/volumes/",children:"docker volumes"})," which we will show later in detail during the Tributech Agent startup."]}),"\n",(0,r.jsxs)(t.p,{children:["\u26a0\ufe0f"," ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"enrollment.key"})})," file in the referenced folder must contain the ",(0,r.jsx)(t.code,{children:"enrollment key"})," in the format:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDB910tiUPf3jp3\n...\nJoTeVZlyPgWSr6ckDiYrXZCINfeupxIpUNa2dOTssJ7frddsOc65TjYaEGtQFhN9\nUuhRTNXXB3LPeUekmFqAFw==\n-----END PRIVATE KEY-----\n"})}),"\n",(0,r.jsxs)(t.p,{children:["\u26a0\ufe0f"," ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"enrollment.crt"})})," file in the referenced folder must contain the ",(0,r.jsx)(t.code,{children:"enrollment certificate"})," in the format:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"-----BEGIN CERTIFICATE-----\nMIIEhDCCAmygAwIBAgIVAMJHgTEKo6BAjM2x17MzqEoBAAAAMA0GCSqGSIb3DQEB\n...\nrTGtd7jookqEziPG7j9oN6Q4jQZI/fGeTDpz5JvEPriFWg4niwdZZVTVi4Axk0wT\nXb7SLA93BKc=\n-----END CERTIFICATE-----\n"})}),"\n",(0,r.jsx)(t.h3,{id:"docker-volumes",children:"Docker volumes"}),"\n",(0,r.jsxs)(t.p,{children:["Docker Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.\nTo make local certificates folders available to a docker container we need to add the mount to our ",(0,r.jsx)(t.code,{children:"tributech-agent"})," service.\nThe folder for the certificates can be adjusted as needed (",(0,r.jsx)(t.code,{children:"./enrollment"}),") only the ",(0,r.jsx)(t.code,{children:":/app/enrollment"})," needs to\nstay the same."]}),"\n",(0,r.jsx)(o.A,{className:"language-yml",title:"docker-compose.yml section",children:h}),"\n",(0,r.jsx)(t.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsxs)(t.p,{children:["The second way to add enrollment certificates to a Tributech Agent is to use ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/compose/environment-variables/set-environment-variables/",children:"environment variables"}),". The content of the certificate files needs to be converterted into a base64 encoded string without whitespaces, i.e. detailed information on how to convert a file into a base64 representation can be found here for ",(0,r.jsx)(t.a,{href:"https://github.com/tributech-solutions/tributech-enrollment/tree/main/Windows",children:"Windows"})," and ",(0,r.jsx)(t.a,{href:"https://github.com/tributech-solutions/tributech-enrollment/tree/main/Linux",children:"Unix"}),". We then add the base64 encoded content of the ",(0,r.jsx)(t.code,{children:"enrollment.crt"})," (Certificate) as ",(0,r.jsx)(t.code,{children:"EnrollmentOptions__EnrollmentCertBase64"})," value and the ",(0,r.jsx)(t.code,{children:"EnrollmentOptions__EnrollmentKeyBase64"})," contains base64 encoded ",(0,r.jsx)(t.code,{children:"enrollment.key"})," content."]}),"\n",(0,r.jsx)(o.A,{className:"language-yml",title:"docker-compose.yml section",children:a}),"\n",(0,r.jsx)(t.h2,{id:"starting-a-tributech-agent",children:"Starting a Tributech Agent"}),"\n",(0,r.jsxs)(t.p,{children:["After we have prepared the Tributech Agent certificates for the enrollment we can now startup whole environment.\nIn our example, we will use the certificate reference via environment variables. If docker volumes are preferred\nthe ",(0,r.jsx)(t.code,{children:"tributech-agent-simulated"})," ",(0,r.jsx)(t.code,{children:"docker-compose.yml"})," file in the following examples must be adapted as described in the previous section."]}),"\n",(0,r.jsxs)(t.p,{children:["\u26a0\ufe0f"," In our examples for the setup documentation, we will use different container images and configurations compared to the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/quickstart",children:"Quickstart"}),". Please use a new empty folder for the files to prevent any configuration mix."]}),"\n",(0,r.jsxs)(t.p,{children:["We have a ",(0,r.jsx)(t.code,{children:"docker-compose.yml"})," prepared for an quick and easy setup containing a MQTT Message Broker, a Tributech Agent and a ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/sources/simulated_source",children:"Tributech Simulated Source"}),". Note that the local MQTT Message Broker is required for the communication between the Tributech Agent and a ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/sources/simulated_source",children:"Tributech Simulated Source"})," on the Edge Device\nand will ",(0,r.jsx)(t.strong,{children:"not"})," be used for interactions with the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"}),"."]}),"\n",(0,r.jsx)(o.A,{className:"language-yml",title:"docker-compose.yml",children:c}),"\n",(0,r.jsx)(t.p,{children:"Docker Compose provides a ready-made setup, but some settings must be adapted to the environment in which it is executed:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"EdgeDeviceOptions__AgentID"})," is a ",(0,r.jsx)(t.strong,{children:"GUID"})," that can be freely chosen but ",(0,r.jsx)(t.strong,{children:"must be unique for each agent"})," connecting to the same ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"EdgeDeviceOptions__NodeUrl"})," is the absolute URL to the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," the agent should connect to"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"EnrollmentOptions__EnrollmentCertBase64"})," and ",(0,r.jsx)(t.code,{children:"EnrollmentOptions__EnrollmentKeyBase64"})," are base64 encoded certifcates required to authenticate with a ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," (see ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/agent/agent_management",children:"Agent Management"}),")"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Sample values:"}),"\n",(0,r.jsx)(o.A,{className:"language-plain",title:"env specific settings",children:d.A}),"\n",(0,r.jsxs)(t.p,{children:["We can now ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"Startup"})})," the environment by running the following command (or ",(0,r.jsx)(t.code,{children:"docker-compose"})," for older versions):"]}),"\n",(0,r.jsx)(o.A,{className:"bash",title:"terminal",children:(0,r.jsx)(t.p,{children:"docker compose up -d"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"Validate"})})," that all containers are running. The output should return that every container is in the state ",(0,r.jsx)(t.code,{children:"Up"})]}),"\n",(0,r.jsx)(o.A,{className:"bash",title:"terminal",children:(0,r.jsx)(t.p,{children:"docker compose ps"})}),"\n",(0,r.jsxs)(t.p,{children:["If you encounter problems with starting the containers please consult the official ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/compose/reference/",children:"docker documentation"})," and revisit the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/requirements",children:"requirements"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["If all container are up and running we can inspect the Tributech Agent and check if its in the expect state by checking the logs for a recurring message ",(0,r.jsx)(t.code,{children:"Enrollment is not finished yet and needs to be confirmed by a user on the Node"}),"."]}),"\n",(0,r.jsx)(o.A,{className:"bash",title:"terminal",children:(0,r.jsx)(t.p,{children:"docker compose logs -f tributech-agent-simulated"})}),"\n",(0,r.jsxs)(t.p,{children:["This message means that we now have a running Tributech Agent which requires permission from the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," to establish a connection. Our current setup is started with the default values for the Tributech Agent and Tributech Source and requires to be configured in the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," in order to send sample data."]}),"\n",(0,r.jsx)(t.h2,{id:"activate-agent",children:"Activate Agent"}),"\n",(0,r.jsxs)(t.p,{children:["After the docker containers have been startet successfully the Agent will connect to the specified environment automatically. The user has to check if the Agent is present in the ",(0,r.jsx)(t.code,{children:"enrollment section"}),". To access the enrollment the user just has to click on ",(0,r.jsx)(t.code,{children:"Enrollment"})," in the left management panel of the Tributech UI."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Activate Tributech Agent",src:n(77675).A+"",width:"1549",height:"568"})}),"\n",(0,r.jsxs)(t.p,{children:["The Agent with our specific ",(0,r.jsx)(t.code,{children:"Agent ID"})," should be in ne of the top most entries of the list and should be in the ",(0,r.jsx)(t.code,{children:"Pending"})," state.\nIf to many agents are listed we can search for the Agent with the ",(0,r.jsx)(t.code,{children:"AGENT_ID"})," we defined docker compose file (value for ",(0,r.jsx)(t.code,{children:"EdgeDeviceOptions__AgentID"})," in our example ",(0,r.jsx)(t.code,{children:"00000000-0000-0000-0000-000000000007"}),"). By clicking on the ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"Activate"})})," button we grant our agent the permission to connect and be management by this ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"}),". For more information on agent management in the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," visit ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/agent/agent_management",children:"agent management"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Activate Tributech Agent",src:n(2406).A+"",width:"1918",height:"917"})}),"\n",(0,r.jsxs)(t.p,{children:["After the successfully activating the agent state will switch from ",(0,r.jsx)(t.code,{children:"Pending"})," to ",(0,r.jsx)(t.code,{children:"Online"})," which indicates that the Tributech Agent is now ready to be configuration. In the current state the Tributech Agent has a connection to the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/overview",children:"Tributech Node"})," established but does not have any configuration. This means he does not know of any ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_agent/source_integration",children:"Tributech Sources"})," on the same Edge Device."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Online Tributech Agent",src:n(38710).A+"",width:"1549",height:"558"})}),"\n",(0,r.jsxs)(t.p,{children:["To complete the configuration of a Tribtech Agent visit the ",(0,r.jsx)(t.a,{href:"/4.0.0/tributech_node/agent/agent_configuration#configuring-an-agent",children:"configuration section"}),"."]})]})}function b(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},48950:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/node-agent-management-certificate-generation-f72cec6d525e459aaf1d378d1ab36d50.png"},77675:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/agent-bond-enrollment-d34e332ad21e2bd00e6d056d1753b6cf.png"},78527:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/TributechArchitectureAgent-430abc94a8f371ef441dd3e36a7ab141.png"},95950:(e,t,n)=>{n.d(t,{A:()=>i});const i="tributech-agent:\n    ...\n    environment:\n      ...\n      - EdgeDeviceOptions__AgentID=00000000-0000-0000-0000-000000000007\n      - EdgeDeviceOptions__NodeUrl=https://my-environment.tributech-node.com\n      - EnrollmentOptions__EnrollmentCertBase64=LS0tLS1C...ZDdqb29rcUV\n      - EnrollmentOptions__EnrollmentKeyBase64=AKS0tLS1C...ZDdqb29rcDE"},97540:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/EdgeDeviceOverviewFocusAgent-53f6c5140aec85753a266bd3ef5ce7f4.png"}}]);