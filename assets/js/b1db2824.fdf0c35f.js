"use strict";(self.webpackChunktributech_docs=self.webpackChunktributech_docs||[]).push([[5430],{59:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/node-source-audit-overview-filter-details-446db3484468c76a4dd07a25059d6bc9.png"},48069:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tributech_node/agent/verification","title":"Stream Verification","description":"Verify data","source":"@site/versioned_docs/version-5.0.0/tributech_node/agent/verification.mdx","sourceDirName":"tributech_node/agent","slug":"/tributech_node/agent/verification","permalink":"/tributech_node/agent/verification","draft":false,"unlisted":false,"editUrl":"https://github.com/tributech-solutions/tributech-dsk-docs/edit/master/versioned_docs/version-5.0.0/tributech_node/agent/verification.mdx","tags":[],"version":"5.0.0","sidebarPosition":3,"frontMatter":{"title":"Stream Verification","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Agent Configuration","permalink":"/tributech_node/agent/agent_configuration"},"next":{"title":"Usage","permalink":"/tributech_node/api_category/API_usage"}}');var a=t(74848),n=t(28453);t(21028);const r={title:"Stream Verification",sidebar_position:3},d=void 0,o={},l=[{value:"Verify data",id:"verify-data",level:2},{value:"Validation Graph",id:"validation-graph",level:3},{value:"Validation Table",id:"validation-table",level:3}];function c(e){const i={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h2,{id:"verify-data",children:"Verify data"}),"\n",(0,a.jsxs)(i.p,{children:["In order to detect ",(0,a.jsx)(i.a,{href:"https://www.tributech.io/blog/cybersecurity-threat-data-tampering",children:"data tampering"})," we provide the possibility to audit each stream individually and quickly find failed validations. We can either use a graph to visually find problems or a table to filter proofs with the predefined filters. We will describe both options in the following sections."]}),"\n",(0,a.jsx)(i.h3,{id:"validation-graph",children:"Validation Graph"}),"\n",(0,a.jsxs)(i.p,{children:["The Validation Graph can be displayed by clicking ",(0,a.jsx)(i.em,{children:(0,a.jsx)(i.strong,{children:"Display Audit Result"})})," and contains three different colors:"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.em,{children:(0,a.jsx)(i.strong,{children:"gray"})})," - validation is pending"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.em,{children:(0,a.jsx)(i.strong,{children:"green"})})," - validation was successful"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.em,{children:(0,a.jsx)(i.strong,{children:"red"})})," - validation was not successful"]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"Audit Graph",src:t(69010).A+"",width:"1725",height:"741"})}),"\n",(0,a.jsx)(i.h3,{id:"validation-table",children:"Validation Table"}),"\n",(0,a.jsxs)(i.p,{children:["In Order to view every created proof with its validation history in table format we can use the ",(0,a.jsx)(i.code,{children:"AUDIT RESULTS"})," button from the stream overview:"]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"Select audit",src:t(50328).A+"",width:"1712",height:"781"})}),"\n",(0,a.jsx)(i.p,{children:"The audit results table view provides the possibility to filter the audit results based on the validation result. We can use the filter to quickly find failed validations and inspect the validation history for any given proof.\nWe want to highlight some features to quickly get started with the audit:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:["Overview - Display all created proofs in timespan sorted by Proof Timestamp\n",(0,a.jsx)(i.img,{alt:"Audit overview",src:t(59273).A+"",width:"1717",height:"893"})]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:["Filter - Limit the displayed audit results based on the validation result\n",(0,a.jsx)(i.img,{alt:"Alt text",src:t(68562).A+"",width:"1717",height:"893"})]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"Alt text",src:t(59).A+"",width:"1709",height:"668"})}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"Retrigger - Validation can be triggered manually and the table view will always display the latest validation result for any proof."}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"Audit retrigger",src:t(67395).A+"",width:"1724",height:"614"})}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"History - By selecting a proof row we can inspect the validation history for each proof."}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"Audit retrigger history",src:t(87344).A+"",width:"1649",height:"739"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},50328:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/node-source-select-audit-6e6e1c7e6ede89ae09f401ff1686a3b7.png"},59273:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/node-source-audit-overview-84a6d4a98dc5392032260e4046179619.png"},67395:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/node-source-audit-retrigger-78175bd27017c1e97ca0c394feecf083.png"},68562:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/node-source-audit-overview-filter-9d9d8fb9e0e92db134bac4ed75f0a5fa.png"},69010:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/node-source-audit-graph-a2e89f9e399364db896efcd0bc7a7f26.png"},87344:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/node-source-audit-retrigger-history-bcc70597811b086e8708cd9e51c26fc4.png"}}]);