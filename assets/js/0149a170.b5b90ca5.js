"use strict";(self.webpackChunktributech_docs=self.webpackChunktributech_docs||[]).push([[8645],{11332:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var r=n(83117),i=n(80102),a=(n(67294),n(3905)),o=["components"],s={title:"Agent Architecture",sidebar_position:3},c="Agent Architecture",u={unversionedId:"introduction/agent_architecture",id:"introduction/agent_architecture",title:"Agent Architecture",description:"In this section, we will have a more detailed look at our Agent's architecture and services. There are two different versions of Tributech Agents for edge (docker) and embedded (C library/hardware module) IoT devices. On this page, we use the docker-based version for edge devices as an example and outline the core concepts applying to both implementations.",source:"@site/docs/introduction/agent_architecture.md",sourceDirName:"introduction",slug:"/introduction/agent_architecture",permalink:"/next/introduction/agent_architecture",draft:!1,editUrl:"https://github.com/tributech-solutions/tributech-dsk-docs/edit/master/docs/introduction/agent_architecture.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Agent Architecture",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Node Architecture",permalink:"/next/introduction/node_architecture"},next:{title:"Overview",permalink:"/next/setup/overview"}},l={},d=[{value:"System &amp; Service Architecture",id:"system--service-architecture",level:2},{value:"Generation of Data Quality Seals\u202f",id:"generation-of-data-quality-seals",level:2},{value:"Self-description and Configuration",id:"self-description-and-configuration",level:2},{value:"Secure Provisioning and Linking",id:"secure-provisioning-and-linking",level:2}],p={toc:d};function h(e){var t=e.components,s=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"agent-architecture"},"Agent Architecture"),(0,a.kt)("p",null,"In this section, we will have a more detailed look at our Agent's architecture and services. There are two different versions of Tributech Agents for edge (docker) and embedded (C library/hardware module) IoT devices. On this page, we use the docker-based version for edge devices as an example and outline the core concepts applying to both implementations."),(0,a.kt)("h2",{id:"system--service-architecture"},"System & Service Architecture"),(0,a.kt)("p",null,"The following figure provides an overview of the Agent services and the communication with Tributech Node APIs."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"System",src:n(16712).Z,width:"1430",height:"1120"})),(0,a.kt)("p",null,"The Tributech Agent subscribes to available data streams on the message bus, generates data quality seals, transferers the data streams and quality seals to the Tributech Node middleware and maintains a digital twin based self-description that is also used for the configuration."),(0,a.kt)("p",null,"The core modules of the Tributech Agent are available as docker-compose application bundle that includes core services, sinks and a MQTT message broker. In addition to the core application bundle, the Agent supports integrations via data connectors (e.g. OPC-UA) and integrations into IoT runtimes of IoT device management platforms."),(0,a.kt)("h2",{id:"generation-of-data-quality-seals"},"Generation of Data Quality Seals\u202f"),(0,a.kt)("p",null,"To enable the verification of data integrity and authenticity between a data source and data consumers across different infrastructures, the Tributech Agent generates and stores verifiable data quality seals (also called proofs) in the blockchain-based trust layer."),(0,a.kt)("p",null,"For each datapoint or set of datapoints (depending on the configuration), the\u202fAgent creates a signed SHA 256 root hash that is transferred to the Trust API endpoint of a Node and stored on-chain. In addition, each proof / data quality seal includes a reference that points to the raw data that is stored off-chain in the data layer of a Tributech Node or an external storage system, per default transferred to the Data API endpoint."),(0,a.kt)("h2",{id:"self-description-and-configuration"},"Self-description and Configuration"),(0,a.kt)("p",null,"The configuration and self-description of each Agent is modelled as a digital twin, stored as a DTDL JSON file and synchronized with the agent management on the backend side. The configuration includes everything that is needed to configure a Tributech Agent, including connected sources and sinks."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Self Description",src:n(18992).Z,width:"936",height:"515"})),(0,a.kt)("h2",{id:"secure-provisioning-and-linking"},"Secure Provisioning and Linking"),(0,a.kt)("p",null,"To generate data quality seals, a Tributech Agent requires a cryptographic key pair. Therefore, our services provide a secure key provisioning and linking process for Agents that include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Authentication and logging of users that provision Tributech Agents"),(0,a.kt)("li",{parentName:"ul"},"Secure offline generation of key pairs (HSM or local storage)"),(0,a.kt)("li",{parentName:"ul"},"A signing challenge to link Agents"),(0,a.kt)("li",{parentName:"ul"},"A public key registry to store keys of provisioned Agents")),(0,a.kt)("p",null,"Users can now link and provision an Agent directly from the Node's webinterface. For this process, a user needs to sign in to verify his permissions and track/log the provisioning activities within his identity. These steps protect the system against malicious parties that want to link an Agent or send corrupted/manipulated data."))}h.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return h}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),h=i,f=p["".concat(c,".").concat(h)]||p[h]||d[h]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},18992:function(e,t,n){t.Z=n.p+"assets/images/self_descriptions-6957850400e3b7f88c2a66bb09f374e4.png"},16712:function(e,t,n){t.Z=n.p+"assets/images/system-d376ce86dfb83a827efa54a8c0ebe711.png"}}]);