{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentName": {
      "type": "string",
      "metadata": {
        "description": "Unique agent name (also used for naming Azure resources like VM, NSG,...)."
      }
    },
    "vmSize": {
      "defaultValue": "Standard_DS1_v2",
      "type": "string",
      "metadata": {
        "description": "VM size"
      }
    },
    "adminUsername": {
      "defaultValue": "tributech",
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "defaultValue": "password",
      "allowedValues": ["password", "sshPublicKey"],
      "type": "string",
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
      }
    },
    "allowSsh": {
      "defaultValue": true,
      "type": "bool",
      "metadata": {
        "description": "Allow SSH traffic through the firewall"
      }
    },
    "dockerRegistryTokenName": {
      "defaultValue": "tributech-io-dsk-edge",
      "type": "string",
      "metadata": {
        "description": "Docker Container Registry (ACR) token name"
      }
    },
    "dockerRegistryToken": {
      "type": "securestring",
      "metadata": {
        "description": "Docker Container Registry (ACR) token"
      }
    },
    "agentImageTag": {
      "defaultValue": "2.0.5",
      "type": "string",
      "metadata": {
        "description": "DSK Agent Docker Image Tag (e.g. 2.0.5)"
      }
    },
    "sourceImageTag": {
      "defaultValue": "2.0.5",
      "type": "string",
      "metadata": {
        "description": "DSK Source Docker Image Tag (e.g. 2.0.5)"
      }
    },
    "agentId": {
      "defaultValue": "[newGuid()]",
      "type": "string",
      "metadata": {
        "description": "Unique agent id (UUID)"
      }
    },
    "nodeName": {
      "defaultValue": "dev-node-a",
      "type": "string",
      "metadata": {
        "description": "The node name (e.g. dev-node-a for dev-node-a.dataspace-node.com)"
      }
    },
    "hubName": {
      "defaultValue": "dev",
      "type": "string",
      "metadata": {
        "description": "The node name (e.g. dev for dev.dataspace-hub.com)"
      }
    },
    "lokiPromtailPw": {
      "type": "securestring",
      "metadata": {
        "description": "Promtail (Loki push API) password"
      }
    },
    "dockerComposeOverrideFileUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Additional docker-compose override file"
      }
    }
  },
  "variables": {
    "dockerComposeFileUrl": "https://raw.githubusercontent.com/tributech-solutions/tributech-dsk-docs/feature/agent-deploy/docs/deployments/dsk-agent/docker-compose.yml",
    "acrUrl": "tributech.azurecr.io",
    "imagePublisher": "Canonical",
    "imageOffer": "0001-com-ubuntu-server-focal",
    "ubuntuOSVersion": "20_04-lts-gen2",
    "nicName": "[concat(parameters('agentName'), '-nic')]",
    "vmName": "[concat(parameters('agentName'), '-vm')]",
    "virtualNetworkName": "[concat(parameters('agentName'), '-vnet')]",
    "publicIPAddressName": "[concat(parameters('agentName'), '-ip')]",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "[concat(parameters('agentName'), '-subnet')]",
    "subnet1Prefix": "10.0.0.0/24",
    "publicIPAddressType": "Static",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/',variables('subnet1Name'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "networkSecurityGroupName": "[concat(parameters('agentName'), '-nsg')]",
    "sshRule": [
      {
        "name": "default-allow-22",
        "properties": {
          "priority": 1000,
          "access": "Allow",
          "direction": "Inbound",
          "destinationPortRange": "22",
          "protocol": "Tcp",
          "sourceAddressPrefix": "*",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "*"
        }
      }
    ],
    "noRule": []
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2015-06-15",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-08-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": "[if(parameters('allowSsh'), variables('sshRule'), variables('noRule'))]"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2015-06-15",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["[variables('addressPrefix')]"]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2015-06-15",
      "name": "[variables('nicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2016-04-30-preview",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "customData": "[base64(concat('#cloud-config\n\npackage_upgrade: true\npackage_reboot_if_required: false\napt:\n  preserve_sources_list: true\n  sources:\n    docker.list:\n      source: \"deb https://download.docker.com/linux/ubuntu focal stable\"\n      keyid: 0EBFCD88\npackages:\n  - docker-ce\n  - docker-ce-cli\n  - containerd.io\n  - docker-compose\n\ngroups:\n  - docker\n\nsystem_info:\n  default_user:\n    groups: [docker]\n'))]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "[concat(variables('vmName'), '-CustomScript')]",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2019-03-01",
          "dependsOn": ["[variables('vmName')]"],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "skipDos2Unix": false
            },
            "protectedSettings": {
              "fileUris": "[union(array(variables('dockerComposeFileUrl')), if(empty(parameters('dockerComposeOverrideFileUrl')), createArray(), array(parameters('dockerComposeOverrideFileUrl'))))]",
              "commandToExecute": "[format('echo \"Waiting for cloud-init completion...\" && cloud-init status -wl && echo ''Cloud-init finished, copying files...'' && printf \"AGENT_TAG=%s\\nSOURCE_TAG=%s\\nAGENT_ID=%s\\nAGENT_NAME=%s\\nNODE_NAME=%s\\nHUB_NAME=%s\\nLOKI_PROMTAIL_PW=%s\\n\" \"{4}\" \"{10}\" \"{5}\" \"{9}\" \"{6}\" \"{7}\" \"{8}\" > .env && install -m 775 -o {0} .env *.yml /home/{0} && echo ''Files copied, trying to login at Docker Registry...'' && sudo -u {0} bash -c \"cd /home/{0}/ && echo {1} | docker login --username {2} --password-stdin {3} && echo ''Docker Registry login succeeded, trying docker-compose up''&& docker-compose up -d && echo ''docker-compose up finished''\"', parameters('adminUsername'), parameters('dockerRegistryToken'), parameters('dockerRegistryTokenName'), variables('acrUrl'), parameters('agentImageTag'), parameters('agentId'), parameters('nodeName'), parameters('hubName'), parameters('lokiPromtailPw'), parameters('agentName'), parameters('sourceImageTag'))]"
            }
          }
        }
      ]
    }
  ],
  "outputs": {
    "Public SSH": {
      "type": "string",
      "value": "[concat('ssh ', reference(resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))).osProfile.adminUsername, '@', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))).ipAddress, ' -L 5000:localhost:5000')]"
    }
  }
}
